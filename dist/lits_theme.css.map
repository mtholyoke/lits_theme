{"version":3,"file":"lits_theme.css","mappings":"AAkCA;;CAhCC;;ACFD;;;EAGE;AAEF;AAQA;;;;;;;;;;;EAGE;AAaF;;;;;;;;;EAHE;AAiBF;;;;;;;;;;EANE;AAqBF;;;;;;;;;;;EATE;AAkEF;;;;;;;;;EAxDE;AAsEF;;;;;;;;;;EA3DE;AA8FF;;;;;;;;;;EAnFE;AAsHF;;;;;;;;;EA5GE;;;AC3FF;;;EAGE;AAEF;AAOA;AAOA;AAkCA;;AChDA;EAJE,aAAa;EACb,eAAe","sources":["webpack://theme-preprocess/./components/00-particles/_01-variables.scss","webpack://theme-preprocess/./components/00-particles/_02-responsiveness.scss","webpack://theme-preprocess/./components/00-particles/global/01-colors/_color-vars.scss","webpack://theme-preprocess/./components/00-particles/layouts/grid/_grid.scss"],"sourcesContent":["//////////////////////////\n// General Variables\n// Note: colors should go into\n// components/_patterns/00-base/global/01-colors/_color-vars.scss\n// and breakpoint related vars into\n// components/_patterns/00-base/_breakpoints.scss\n\n// Fonts\n$font-body: \"ars-maquette-web\", sans-serif;\n$font-heading: \"ars-maquette-web\", sans-serif;\n\n// available font-weights include: 300, 400, 500, 700\n// with italic being available in font-weights 400 and 700\n\n// Spacing\n$space: 1rem;\n\n// times\n$space-double: $space*2;\n$space-triple: $space*3;\n$space-quadruple: $space*4;\n$space-quintuple: $space*5;\n$space-sextuple: $space*6;\n$space-septuple: $space*7;\n\n// divided\n$space-one-half: $space/2;\n$space-one-third: $space/3;\n$space-one-fourth: $space/4;\n$space-one-fifth: $space/5;\n$space-one-sixth: $space/6;\n$space-one-seventh: $space/7;\n$space-one-eighth: $space/8;\n\n/**\n* Used to set the font size for \"LITS\" in logobar and to add whitespace to the MHC logos\n*/\n// $logo-font-size: 17px;\n$logo-container-max-height: 60px;\n\n// wordmark values\n$o-ratio: 19.893 / 40.849; // height of 'o' in wordmark svg vs height of svg as measured in Illustrator\n$word-logo-image-max-height: $logo-container-max-height * $o-ratio;\n$word-default-margin: $word-logo-image-max-height / 2;\n// $word-logo-font-size: $word-default-margin; // The size of the 'o' should be the font-size also TODO: this sort of looks small...\n$word-logo-font-size: 19px;\n\n// monogram values\n$c-ratio: 64.9 / 108; // height of 'c' in wordmark svg vs height of svg as measured in Illustrator\n$mono-logo-image-max-height: $logo-container-max-height * (1 - $c-ratio);\n$mono-default-margin: $mono-logo-image-max-height / 2;\n// $mono-logo-font-size: $mono-default-margin; // The size of the 'c' should be the font-size also TODO: this sort of looks small...\n$mono-logo-font-size: 19px;\n","/**\n * @file\n * Variables, functions, and mixins to support responsiveness.\n */\n\n/* Breakpoints */\n$min-width: 300px;\n$small-width: 600px;\n$medium-width: 900px;\n$large-width: 1200px;\n$max-width: 1920px;\n$content-max-width: $max-width;\n\n/**\n * Standardized rate plus minimum size.\n *\n * @param number(size) $min-value\n *   The minimum size at the zero point of linear-squish() function.\n * @param number(size) $width\n *   Breakpoint to pass to linear-squish() function.\n * @return number(size)\n *   Computed padding size.\n *\n * Calculation happens in CSS (not Sass), so any linear units are allowable.\n */\n@function augmented-squish($min-value, $width) {\n  @return '(#{$min-value} + #{linear-squish($width)})';\n}\n\n/**\n * Padding size is proportional to viewport width.\n *\n * @param number(size) $width\n *   The zero-point for expansion. Usually a breakpoint.\n * @return number(size)\n *   Computed padding size.\n *\n * Calculation happens in CSS (not Sass), so any linear units are allowable.\n */\n@function linear-squish($width) {\n  @return '((100vw - #{$width}) / #{squish-factor()})';\n}\n\n/**\n * Convert rem to px for Sass calculation.\n *\n * @param number(rem) $rem\n *   Value in rem to convert.\n * @return number(px)\n *   Number of pixels corresponding to input.\n *\n * TODO: Is there a better place for helper functions?\n * TODO: Is 1rem => 16px explicitly specified anywhere?\n */\n@function rem-to-px($rem) {\n  @return ($rem / 1rem) * 16px;\n}\n\n/**\n * Assigns breakpoint-dependent values to flex-basis, and width 100% within.\n *\n * @param number(size) $small-basis\n *   The flex-basis for breakpoint $small-width.\n * @param number(size) $medium-basis\n *   The flex-basis for breakpoint $medium-width.\n * @param number(size) $large-basis\n *   The flex-basis for breakpoint $large-width.\n *\n * Any valid size units for flex-basis are allowed.\n */\n@mixin responsive-basis($small-basis, $medium-basis, $large-basis, $type:false) {\n  width: 100%;\n  flex-basis: auto;\n  margin: 0;\n\n  @include breakpoint($small-width) {\n    width: $small-basis;\n  }\n\n  @include breakpoint($medium-width) {\n    width: $medium-basis;\n  }\n\n  @include breakpoint($large-width) {\n    width: $large-basis;\n  }\n\n  @include breakpoint($max-width) {\n    width: auto;\n    // width needs to be whatever the stretchy outer squishy-padding is PLUS $large-basis of $max-width minus the inner side padding\n    $min-padding: 0.5rem; // from squishy-padding\n    $max-allowed: '((#{$max-width} - #{$medium-width}) / #{squish-factor()})'; // from squishy-padding\n    $padding: '(#{$min-padding} + #{$max-allowed})'; // from squishy-padding -- this is the padding for the inner/non-stretch edge\n    $padding-stretch: '(#{$padding} + ((100% - #{$max-width}) / 2))';// from squishy-padding -- this is the padding for the outer/stretchy edge\n    $unitless-basis: strip-unit($large-basis / 100);// convert percentage value (eg '62%'') to a mathy ratio value (eg '0.62')\n    $content-area-width: '((#{$content-max-width} * #{$unitless-basis}) - #{$padding})'; // width of the content, given the large basis and the maximum possible content area\n\n    @if ($type == stretch) {\n      width: calc(#{$padding-stretch} + #{$content-area-width});\n    }\n  }\n}\n\n/// Remove the unit of a length\n/// @param {Number} $number - Number to remove unit from\n/// @return {Number} - Unitless number\n/// https://css-tricks.com/snippets/sass/strip-unit-function/\n@function strip-unit($number) {\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n\n  @return $number;\n}\n\n/**\n * Smaller numbers mean faster expansion as viewport width increases.\n *\n * @return number(unitless)\n *   Inverse rate of expansion.\n *\n * 6 => max padding 170px + min => max content width 1564px.\n * 5 => max padding 204px + min => max content width 1496px.\n * 4 => max padding 255px + min => max content width 1394px.\n */\n@function squish-factor() {\n  @return 6;\n}\n\n/**\n * Sets scalable viewport-dependent padding on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set padding for. Must be one of 'left' or 'right'.\n * @param number(unitless) $scale\n *   Multiply all padding values (including max) by this. Useful for gutters\n *   split between multiple elements, such as news items on the homepage.\n * @param number(rem) $max-padding\n *   Do not set a padding higher than $scale times this value.\n */\n@mixin squishy-gutter($side, $scale: 1, $max-padding: 2rem) {\n  $min-padding: 0.5rem;\n\n  padding-#{$side}: calc(#{$scale} * #{$min-padding});\n\n  @if unit($max-padding) != \"rem\" {\n    @error \"Max padding must be specified in rem units.\";\n  }\n\n  @if $max-padding > $min-padding {\n    // 900px => 8px padding, then scale up..\n    @include breakpoint($medium-width) {\n      padding-#{$side}: calc(#{$scale} * #{augmented-squish($min-padding, $medium-width)});\n    }\n\n    // Stop increasing when we reach $scale times $max-padding.\n    $delta: rem-to-px($max-padding - $min-padding);\n\n    @include breakpoint($medium-width + (squish-factor() * $delta)) {\n      padding-#{$side}: calc(#{$scale} * #{$max-padding});\n    }\n  }\n}\n\n/**\n * Sets scalable viewport-dependent margin on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set margin for. Must be one of 'left' or 'right'.\n * @param number(unitless) $scale\n *   Multiply all margin values (including max) by this. Useful for gutters\n *   split between multiple elements, such as news items on the homepage.\n * @param number(rem) $max-margin\n *   Do not set a margin higher than $scale times this value.\n */\n@mixin squishy-margin($side, $scale: 1, $max-margin: 2rem) {\n  $min-margin: 0.5rem;\n\n  margin-#{$side}: calc(#{$scale} * #{$min-margin});\n\n  @if unit($max-margin) != \"rem\" {\n    @error \"Max margin must be specified in rem units.\";\n  }\n\n  @if $max-margin > $min-margin {\n    // 900px => 8px margin, then scale up..\n    @include breakpoint($medium-width) {\n      margin-#{$side}: calc(#{$scale} * #{augmented-squish($min-margin, $medium-width)});\n    }\n\n    // Stop increasing when we reach $scale times $max-margin.\n    $delta: rem-to-px($max-margin - $min-margin);\n\n    @include breakpoint($medium-width + (squish-factor() * $delta)) {\n      margin-#{$side}: calc(#{$scale} * #{$max-margin});\n    }\n  }\n}\n\n/**\n * Sets viewport-dependent padding on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set padding for. Must be one of 'left' or 'right'.\n * @param unquoted-string $type\n *   Must be either:\n *   - 'bare' (default): viewport larger than $max-width is handled elsewhere.\n *   - 'stretch': extreme viewport size is handled on this element.\n */\n@mixin squishy-padding($side, $type: bare) {\n  $min-padding: 0.5rem;\n  $max-allowed: '((#{$max-width} - #{$medium-width}) / #{squish-factor()})';\n\n  padding-#{$side}: $min-padding;\n\n  // 900px => 8px padding; 1200px => 66px padding; 1920px => 178px padding.\n  @include breakpoint($medium-width) {\n    $augemented-squish: augmented-squish($min-padding, $medium-width);\n\n    padding-#{$side}: calc(#{$augemented-squish});\n  }\n\n  // Above 1920px => 178px unless we need to stretch.\n  @include breakpoint($max-width) {\n    $default-padding: '#{$min-padding} + #{$max-allowed}';\n\n    $padding: calc(#{$default-padding});\n\n    @if ($type == stretch) {\n      $padding: calc(#{$default-padding} + ((100% - #{$max-width}) / 2));\n    }\n\n    padding-#{$side}: $padding;\n  }\n}\n","/**\n * @file\n * Color variables.\n */\n\n/* Primary colors */\n// Top of each pair: official brand color; bottom: provided by designer.\n$dark-blue: #004876;\n// $dark-blue: #0e4977;\n$med-blue: #07c;\n// $med-blue: #2576bc;\n\n/* Background colors */\n$white: white;\n$pale-gray: #e2dfdd; // $gray + 80% tint.\n$dark-red: #6f263d;\n$charcoal: #1a1a1a;\n$black: black;\n\n/* Accent colors */\n$pale-blue: #ccdae3;\n$light-blue: #00a9e0;\n$raspberry: #a20067;\n$red: #ef3340;\n$yellow: #f1c400;\n$dark-green: #2c5234;\n$green: #5c7f1a;\n$light-orange: #ff9e1b;\n$light-green: #84bd00;\n\n// // // // // // // // //\n// TODO: colors below this line are from previous work, and should be\n// moved above it when we figure out that we need them.\n\n$gray: #6e6259;\n// TODO: change to $pale-gray throughout\n$gray-lightest: #e5e5e5;\n$gray-lighter: #ccc;\n$gray-light: #999;\n$gray-dark: #4c4c4c;\n$gray-darker: #333;\n$med-gray: #b8b8b8;\n$fully-transparent: rgba(0, 0, 0, 0);\n\n$dark-blue-90pct: rgba(0, 72, 118, 0.9);\n$darkish-blue: #0065b8;\n$med-blue-94pct: rgba(0, 112, 192, 0.94);\n$bright-blue: #74d7ed;\n$white-90pct: rgba(255, 255, 255, 0.9);\n\n$mustard: #f4c52f;\n$sun-yellow: #ffd328;\n\n/** new colors **/\n\n// Suggested by Chris 7/2/2019; not sure we’re using them.\n$orange: #ff671f;\n\n// $arrow-colors: $sun-yellow, $med-blue, $raspberry, $light-orange, $red, $light-blue, $green, $sun-yellow,  $med-blue, $raspberry, $light-orange, $red, $light-blue, $green;\n","@mixin grid {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.grid {\n  @include grid;\n}\n"],"names":[],"sourceRoot":""}