{"version":3,"file":"lits_theme.css","mappings":"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","sources":["webpack://theme-preprocess/./components/style.scss","webpack://theme-preprocess/./components/00-particles/_01-variables.scss","webpack://theme-preprocess/./components/00-particles/_02-responsiveness.scss","webpack://theme-preprocess/./components/00-particles/_font-chronicle.scss","webpack://theme-preprocess/./components/00-particles/_old_breakpoints.scss","webpack://theme-preprocess/./components/00-particles/global/01-colors/_color-vars.scss","webpack://theme-preprocess/./components/00-particles/global/02-animations/_animation.scss","webpack://theme-preprocess/./components/00-particles/_00-mixins.scss","webpack://theme-preprocess/./components/00-particles/layouts/grid/_01-grid-item.scss","webpack://theme-preprocess/./node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","webpack://theme-preprocess/./components/00-particles/layouts/grid/_grid-item-divider.scss","webpack://theme-preprocess/./components/00-particles/layouts/grid/_grid.scss","webpack://theme-preprocess/./components/02-compounds/01-pages/_page.scss"],"sourcesContent":["// // Start libs\n// // Better style reset\n// @import \"normalize\"; // comes for free from core now??\n// // Grid system, https://github.com/at-import/Singularity\n@import \"singularitygs/stylesheets/singularitygs\";\n// // A cleaner way to do breakpoints/media queries, http://breakpoint-sass.com/\n@import \"breakpoint-sass/stylesheets/breakpoint\";\n// // End libs\n\n// TODO remove this, I'm just adding it to prove that we're on the right track\n.layout-container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-between;\n}\n// END TODO remove this\n\n@import \"./00-particles/**/*.scss\";\n@import \"./01-elements/**/*.scss\";\n@import \"./02-compounds/**/*.scss\";\n","//////////////////////////\n// General Variables\n// Note: colors should go into\n// components/_patterns/00-base/global/01-colors/_color-vars.scss\n// and breakpoint related vars into\n// components/_patterns/00-base/_breakpoints.scss\n\n// Fonts\n$font-body: \"ars-maquette-web\", sans-serif;\n$font-heading: \"ars-maquette-web\", sans-serif;\n\n// available font-weights include: 300, 400, 500, 700\n// with italic being available in font-weights 400 and 700\n\n// Spacing\n$space: 1rem;\n\n// times\n$space-double: $space*2;\n$space-triple: $space*3;\n$space-quadruple: $space*4;\n$space-quintuple: $space*5;\n$space-sextuple: $space*6;\n$space-septuple: $space*7;\n\n// divided\n$space-one-half: $space/2;\n$space-one-third: $space/3;\n$space-one-fourth: $space/4;\n$space-one-fifth: $space/5;\n$space-one-sixth: $space/6;\n$space-one-seventh: $space/7;\n$space-one-eighth: $space/8;\n\n/**\n* Used to set the font size for \"LITS\" in logobar and to add whitespace to the MHC logos\n*/\n// $logo-font-size: 17px;\n$logo-container-max-height: 60px;\n\n// wordmark values\n$o-ratio: 19.893 / 40.849; // height of 'o' in wordmark svg vs height of svg as measured in Illustrator\n$word-logo-image-max-height: $logo-container-max-height * $o-ratio;\n$word-default-margin: $word-logo-image-max-height / 2;\n// $word-logo-font-size: $word-default-margin; // The size of the 'o' should be the font-size also TODO: this sort of looks small...\n$word-logo-font-size: 19px;\n\n// monogram values\n$c-ratio: 64.9 / 108; // height of 'c' in wordmark svg vs height of svg as measured in Illustrator\n$mono-logo-image-max-height: $logo-container-max-height * (1 - $c-ratio);\n$mono-default-margin: $mono-logo-image-max-height / 2;\n// $mono-logo-font-size: $mono-default-margin; // The size of the 'c' should be the font-size also TODO: this sort of looks small...\n$mono-logo-font-size: 19px;\n","/**\n * @file\n * Variables, functions, and mixins to support responsiveness.\n */\n\n/* Breakpoints */\n$min-width: 300px;\n$small-width: 600px;\n$medium-width: 900px;\n$large-width: 1200px;\n$max-width: 1920px;\n$content-max-width: $max-width;\n\n/**\n * Standardized rate plus minimum size.\n *\n * @param number(size) $min-value\n *   The minimum size at the zero point of linear-squish() function.\n * @param number(size) $width\n *   Breakpoint to pass to linear-squish() function.\n * @return number(size)\n *   Computed padding size.\n *\n * Calculation happens in CSS (not Sass), so any linear units are allowable.\n */\n@function augmented-squish($min-value, $width) {\n  @return '(#{$min-value} + #{linear-squish($width)})';\n}\n\n/**\n * Padding size is proportional to viewport width.\n *\n * @param number(size) $width\n *   The zero-point for expansion. Usually a breakpoint.\n * @return number(size)\n *   Computed padding size.\n *\n * Calculation happens in CSS (not Sass), so any linear units are allowable.\n */\n@function linear-squish($width) {\n  @return '((100vw - #{$width}) / #{squish-factor()})';\n}\n\n/**\n * Convert rem to px for Sass calculation.\n *\n * @param number(rem) $rem\n *   Value in rem to convert.\n * @return number(px)\n *   Number of pixels corresponding to input.\n *\n * TODO: Is there a better place for helper functions?\n * TODO: Is 1rem => 16px explicitly specified anywhere?\n */\n@function rem-to-px($rem) {\n  @return ($rem / 1rem) * 16px;\n}\n\n/**\n * Assigns breakpoint-dependent values to flex-basis, and width 100% within.\n *\n * @param number(size) $small-basis\n *   The flex-basis for breakpoint $small-width.\n * @param number(size) $medium-basis\n *   The flex-basis for breakpoint $medium-width.\n * @param number(size) $large-basis\n *   The flex-basis for breakpoint $large-width.\n *\n * Any valid size units for flex-basis are allowed.\n */\n@mixin responsive-basis($small-basis, $medium-basis, $large-basis, $type:false) {\n  width: 100%;\n  flex-basis: auto;\n  margin: 0;\n\n  @include breakpoint($small-width) {\n    width: $small-basis;\n  }\n\n  @include breakpoint($medium-width) {\n    width: $medium-basis;\n  }\n\n  @include breakpoint($large-width) {\n    width: $large-basis;\n  }\n\n  @include breakpoint($max-width) {\n    width: auto;\n    // width needs to be whatever the stretchy outer squishy-padding is PLUS $large-basis of $max-width minus the inner side padding\n    $min-padding: 0.5rem; // from squishy-padding\n    $max-allowed: '((#{$max-width} - #{$medium-width}) / #{squish-factor()})'; // from squishy-padding\n    $padding: '(#{$min-padding} + #{$max-allowed})'; // from squishy-padding -- this is the padding for the inner/non-stretch edge\n    $padding-stretch: '(#{$padding} + ((100% - #{$max-width}) / 2))';// from squishy-padding -- this is the padding for the outer/stretchy edge\n    $unitless-basis: strip-unit($large-basis / 100);// convert percentage value (eg '62%'') to a mathy ratio value (eg '0.62')\n    $content-area-width: '((#{$content-max-width} * #{$unitless-basis}) - #{$padding})'; // width of the content, given the large basis and the maximum possible content area\n\n    @if ($type == stretch) {\n      width: calc(#{$padding-stretch} + #{$content-area-width});\n    }\n  }\n}\n\n/// Remove the unit of a length\n/// @param {Number} $number - Number to remove unit from\n/// @return {Number} - Unitless number\n/// https://css-tricks.com/snippets/sass/strip-unit-function/\n@function strip-unit($number) {\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n\n  @return $number;\n}\n\n/**\n * Smaller numbers mean faster expansion as viewport width increases.\n *\n * @return number(unitless)\n *   Inverse rate of expansion.\n *\n * 6 => max padding 170px + min => max content width 1564px.\n * 5 => max padding 204px + min => max content width 1496px.\n * 4 => max padding 255px + min => max content width 1394px.\n */\n@function squish-factor() {\n  @return 6;\n}\n\n/**\n * Sets scalable viewport-dependent padding on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set padding for. Must be one of 'left' or 'right'.\n * @param number(unitless) $scale\n *   Multiply all padding values (including max) by this. Useful for gutters\n *   split between multiple elements, such as news items on the homepage.\n * @param number(rem) $max-padding\n *   Do not set a padding higher than $scale times this value.\n */\n@mixin squishy-gutter($side, $scale: 1, $max-padding: 2rem) {\n  $min-padding: 0.5rem;\n\n  padding-#{$side}: calc(#{$scale} * #{$min-padding});\n\n  @if unit($max-padding) != \"rem\" {\n    @error \"Max padding must be specified in rem units.\";\n  }\n\n  @if $max-padding > $min-padding {\n    // 900px => 8px padding, then scale up..\n    @include breakpoint($medium-width) {\n      padding-#{$side}: calc(#{$scale} * #{augmented-squish($min-padding, $medium-width)});\n    }\n\n    // Stop increasing when we reach $scale times $max-padding.\n    $delta: rem-to-px($max-padding - $min-padding);\n\n    @include breakpoint($medium-width + (squish-factor() * $delta)) {\n      padding-#{$side}: calc(#{$scale} * #{$max-padding});\n    }\n  }\n}\n\n/**\n * Sets scalable viewport-dependent margin on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set margin for. Must be one of 'left' or 'right'.\n * @param number(unitless) $scale\n *   Multiply all margin values (including max) by this. Useful for gutters\n *   split between multiple elements, such as news items on the homepage.\n * @param number(rem) $max-margin\n *   Do not set a margin higher than $scale times this value.\n */\n@mixin squishy-margin($side, $scale: 1, $max-margin: 2rem) {\n  $min-margin: 0.5rem;\n\n  margin-#{$side}: calc(#{$scale} * #{$min-margin});\n\n  @if unit($max-margin) != \"rem\" {\n    @error \"Max margin must be specified in rem units.\";\n  }\n\n  @if $max-margin > $min-margin {\n    // 900px => 8px margin, then scale up..\n    @include breakpoint($medium-width) {\n      margin-#{$side}: calc(#{$scale} * #{augmented-squish($min-margin, $medium-width)});\n    }\n\n    // Stop increasing when we reach $scale times $max-margin.\n    $delta: rem-to-px($max-margin - $min-margin);\n\n    @include breakpoint($medium-width + (squish-factor() * $delta)) {\n      margin-#{$side}: calc(#{$scale} * #{$max-margin});\n    }\n  }\n}\n\n/**\n * Sets viewport-dependent padding on one side of the element.\n *\n * @param unquoted-string $side\n *   Which side to set padding for. Must be one of 'left' or 'right'.\n * @param unquoted-string $type\n *   Must be either:\n *   - 'bare' (default): viewport larger than $max-width is handled elsewhere.\n *   - 'stretch': extreme viewport size is handled on this element.\n */\n@mixin squishy-padding($side, $type: bare) {\n  $min-padding: 0.5rem;\n  $max-allowed: '((#{$max-width} - #{$medium-width}) / #{squish-factor()})';\n\n  padding-#{$side}: $min-padding;\n\n  // 900px => 8px padding; 1200px => 66px padding; 1920px => 178px padding.\n  @include breakpoint($medium-width) {\n    $augemented-squish: augmented-squish($min-padding, $medium-width);\n\n    padding-#{$side}: calc(#{$augemented-squish});\n  }\n\n  // Above 1920px => 178px unless we need to stretch.\n  @include breakpoint($max-width) {\n    $default-padding: '#{$min-padding} + #{$max-allowed}';\n\n    $padding: calc(#{$default-padding});\n\n    @if ($type == stretch) {\n      $padding: calc(#{$default-padding} + ((100% - #{$max-width}) / 2));\n    }\n\n    padding-#{$side}: $padding;\n  }\n}\n","@font-face {\n  font-family: 'chronicle-bold';\n  src: url('../fonts/chronicle/ChronicleTextG2-Bold-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'chronicle-bold-italic';\n  src: url('../fonts/chronicle/ChronicleTextG2-BoldIta-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'chronicle-italic';\n  src: url('../fonts/chronicle/ChronicleTextG2-Italic-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'chronicle';\n  src: url('../fonts/chronicle/ChronicleTextG2-Roman-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'chronicle-semibold';\n  src: url('../fonts/chronicle/ChronicleTextG2-Semibd-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'chronicle-semibold-italic';\n  src: url('../fonts/chronicle/ChronicleTextG2-SemiIta-Pro.WOFF') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n","/**\n * Breakpoint Configuration\n * @see https://github.com/Team-Sass/breakpoint/wiki\n *\n */\n\n/////////\n// Singularity variables\n\n// Dawn - remove and replace all instances of this nomenclature\n// Desktop wide breakpoint\n$page-desktop-wide: 1920px;\n// Tablet horizontal breakpoint\n$page-tablet-horizontal: 1440px;\n// Tablet portrait breakpoint\n$page-tablet-portrait: 1080px;\n// Phone horizontal breakpoint\n$page-phone-horizontal: 600px;\n//Phone vertical breakpoint\n$page-phone-portrait: 400px;\n\n// Breakpoints Updated\n// $min-width: 300px;\n// $small-width: 600px;\n// $medium-width: 900px;\n// $large-width: 1200px;\n// $max-width: 1920px;\n// (moved to _02-squishiness.scss)\n\n// pairs:\n$phone: $min-width $small-width;\n$tablet: $small-width  $medium-width;\n$laptop: $medium-width $large-width;\n$desktop: $large-width $max-width;\n\n// remove rewrite of breakpoints into EM @include breakpoint-set('to ems', true);\n@include add-grid(12);\n@include add-gutter(1/4);\n\n// Original Breakpoints variables\n$xs: 25em;\n$small: 26em;\n$medium: 41em;\n$large: 48em;\n$xl: 75em;\n$max-width-old: $xl;\n\n/// Mixin - xs Breakpoint\n/// Allows easier @include xs {} syntax\n@mixin xs {\n  @include breakpoint($xs) {\n    @content;\n  }\n}\n\n/// Mixin - small Breakpoint\n/// Allows easier @include small {} syntax\n@mixin small {\n  @include breakpoint($small) {\n    @content;\n  }\n}\n\n/// Mixin - medium Breakpoint\n/// Allows easier @include medium {} syntax\n@mixin medium {\n  @include breakpoint($medium) {\n    @content;\n  }\n}\n\n/// Mixin - large Breakpoint\n/// Allows easier @include large {} syntax\n@mixin large {\n  @include breakpoint($large) {\n    @content;\n  }\n}\n\n/// Mixin - xl Breakpoint\n/// Allows easier @include xl {} syntax\n@mixin xl {\n  @include breakpoint($xl) {\n    @content;\n  }\n}\n\n/// Mixin - max-width Breakpoint\n/// Allows easier @include max-width {} syntax\n@mixin max-width {\n  @include breakpoint($max-width) {\n    @content;\n  }\n}\n","/**\n * @file\n * Color variables.\n */\n\n/* Primary colors */\n// Top of each pair: official brand color; bottom: provided by designer.\n$dark-blue: #004876;\n// $dark-blue: #0e4977;\n$med-blue: #07c;\n// $med-blue: #2576bc;\n\n/* Background colors */\n$white: white;\n$pale-gray: #e2dfdd; // $gray + 80% tint.\n$dark-red: #6f263d;\n$charcoal: #1a1a1a;\n$black: black;\n\n/* Accent colors */\n$pale-blue: #ccdae3;\n$light-blue: #00a9e0;\n$raspberry: #a20067;\n$red: #ef3340;\n$yellow: #f1c400;\n$dark-green: #2c5234;\n$green: #5c7f1a;\n$light-orange: #ff9e1b;\n$light-green: #84bd00;\n\n// // // // // // // // //\n// TODO: colors below this line are from previous work, and should be\n// moved above it when we figure out that we need them.\n\n$gray: #6e6259;\n// TODO: change to $pale-gray throughout\n$gray-lightest: #e5e5e5;\n$gray-lighter: #ccc;\n$gray-light: #999;\n$gray-dark: #4c4c4c;\n$gray-darker: #333;\n$med-gray: #b8b8b8;\n$fully-transparent: rgba(0, 0, 0, 0);\n\n$dark-blue-90pct: rgba(0, 72, 118, 0.9);\n$darkish-blue: #0065b8;\n$med-blue-94pct: rgba(0, 112, 192, 0.94);\n$bright-blue: #74d7ed;\n$white-90pct: rgba(255, 255, 255, 0.9);\n\n$mustard: #f4c52f;\n$sun-yellow: #ffd328;\n\n/** new colors **/\n\n// Suggested by Chris 7/2/2019; not sure we’re using them.\n$orange: #ff671f;\n\n// $arrow-colors: $sun-yellow, $med-blue, $raspberry, $light-orange, $red, $light-blue, $green, $sun-yellow,  $med-blue, $raspberry, $light-orange, $red, $light-blue, $green;\n",".animate-fade {\n  @include transition(opacity, 0.3s, ease-out);\n\n  &:hover {\n    opacity: 0;\n  }\n}\n\n.animate-move {\n  > .demo-shape {\n    @include transition(all, 0.8s, ease-in-out);\n  }\n}\n","/////////////////////\n// General Mixins (put specific ones in component files where applicable)\n\n/// Mixin - Clearfix.\n/// Adds clearfix based on http://bourbon.io/docs/#clearfix\n/// use example =   @include cleafix\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n\n/// Mixin - list-reset\n/// Reset list item defaults when no margin, padding, list styles needed\n@mixin list-reset {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/// Mixin - With Icon\n/// Precede Text with SVG icon\n@mixin with-icon {\n  background-size: cover;\n  content: \"\";\n  display: inline-block;\n  margin-right: 0.1em;\n  padding: 0.8em;\n}\n\n/// Mixin - More Link\n/// Used in a number of views\n@mixin more-link {\n  a {\n    font-size: 1.2rem;\n    line-height: 1.8rem;\n    font-weight: 600;\n    text-decoration: none;\n\n    &::before {\n      content: \"»\";\n      font-size: 1.2rem;\n      margin-right: 0.2em;\n    }\n  }\n}\n\n/// Mixin - Back Link\n/// Used in a number of views\n@mixin back-link {\n  display: block;\n  font-size: 1.2rem;\n  line-height: 1.8rem;\n  font-weight: 600;\n  text-decoration: none;\n\n  &::before {\n    content: \"«\";\n    font-size: 1.2rem;\n    margin-right: 0.2em;\n  }\n}\n\n/// Mixin - Body Copy\n@mixin body-copy {\n  font-family: $font-body;\n  font-size: 1.2rem;\n  line-height: 2rem;\n}\n\n/// Mixin - Transition\n@mixin transition($transition-property, $transition-time, $method) {\n  -webkit-transition: $transition-property $transition-time $method;\n  -moz-transition: $transition-property $transition-time $method;\n  -ms-transition: $transition-property $transition-time $method;\n  -o-transition: $transition-property $transition-time $method;\n  transition: $transition-property $transition-time $method;\n}\n\n/// Mixin - Standard Margin\n@mixin margin {\n  margin-bottom: 1em;\n}\n\n@mixin fontawesome-far {\n  font-family: \"Font Awesome 5 Free\", \"ars-maquette-web\", sans-serif;\n  font-weight: 400;\n}\n\n@mixin fontawesome-fas {\n  font-family: \"Font Awesome 5 Free\", \"ars-maquette-web\", sans-serif;\n  font-weight: 900;\n}\n\n@mixin visually-hidden {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n  height: 1px;\n  width: 1px;\n  word-wrap: normal;\n}\n\n@mixin dark-blue-stripe {\n  background-color: $dark-blue;\n  color: $white;\n}\n\n@mixin med-blue-stripe {\n  background-color: $med-blue;\n  color: $white;\n}\n\n// Set up container to vertically space its contents across the entire viewport\n// Stick footer to bottom of page when there isn't enough content in the body.\n// Loosely based on this fiddle: http://jsfiddle.net/n5BaR/\n@mixin full-viewport {\n  display: flex;\n  flex-direction: column;\n  min-width: $min-width;\n  min-height: 100vh;\n\n  & #main-content {\n    flex: 1 1 auto;\n  }\n}\n\n@mixin rounded-corners {\n  border-radius: 0.25rem;\n}\n\n// BACKGROUNDS:           Possible focus colors (4.5+ vs background)\n// $white (#ffffff):      $med-blue $green $gray $raspberry $dark-blue $dark-red $charcoal $black\n// (#e5e5e5):                              $gray $raspberry $dark-blue $dark-red $charcoal $black\n// $pale-gray (#e2dfdd):                         $raspberry $dark-blue $dark-red $charcoal $black\n// $med-blue (#0077cc):   $white                                                           $black\n// $green (#5c7f1a):      $white                                                           $black\n// $raspberry (#a20067):  $white $pale-gray $pale-blue $yellow\n// $dark-blue (#004876):  $white $pale-gray $pale-blue $yellow $light-orange\n// $dark-red (#6f263d):   $white $pale-gray $pale-blue $yellow $light-orange\n// $charcoal (#1a1a1a):   $white $pale-gray $pale-blue $yellow $light-orange $light-blue $orange\n// $black (#000000):      $white $pale-gray $pale-blue $yellow $light-orange $light-blue $orange $red $med-blue $green\n//\n// Background:            focus color\n// $white (#ffffff):      $dark-blue\n// (#e5e5e5):             $dark-blue\n// $pale-gray (#e2dfdd):  $dark-blue\n// $med-blue (#0077cc):   $white\n// $green (#5c7f1a):      $white\n// $raspberry (#a20067):  $white\n// $dark-blue (#004876):  $white\n// $dark-red (#6f263d):   $white\n// $charcoal (#1a1a1a):   $white\n// $black (#000000):      $white\n//\n// Exceptions:\n// unified search on homepage uses $light-orange on $dark-blue because it's otherwise confusing with the white form fields\n@mixin focus($color: $dark-blue, $type:false) {// default should work against default white background\n  &:focus {\n    outline-offset: 2px;\n    outline: 3px solid $color;\n\n    @if $type == \"link\" {\n      text-decoration: underline solid;\n    }\n  }\n}\n// Force table to not be like tables anymore\n@mixin untablify() {\n  &,\n  thead,\n  tbody,\n  th,\n  td,\n  tr {\n    display: block;\n    height: 100%;\n  }\n\n  thead {\n    @include visually-hidden;\n  }\n\n  th,\n  td {\n    border-bottom: none;\n    display: flex;\n    flex-flow: row wrap;\n    padding: 1rem;\n    box-sizing: border-box;\n  }\n\n  td {\n    /* Behave  like a \"row\" */\n    border: none;\n    position: relative;\n  }\n\n  th[scope=row] {\n    width: auto;\n  }\n\n  tbody tr:first-of-type {\n    border-top: 1px solid $gray-lighter;\n  }\n\n  .col-header {\n    display: inline-block;\n    font-weight: bold;\n    padding-right: 0;\n    width: 100%;\n    word-break: break-all;\n  }\n\n  .col-content {\n    width: 100%;\n    padding-left: 2rem;\n  }\n\n  @include breakpoint($small-width) {\n    .col-header {\n      width: 50%;\n      padding-right: 1rem;\n    }\n\n    .col-content {\n      width: 50%;\n      padding-left: 0;\n    }\n  }\n\n  @include breakpoint($medium-width) {\n    .col-header {\n      width: 33%;\n    }\n\n    .col-content {\n      width: 67%;\n    }\n  }\n\n  @include breakpoint($large-width) {\n    .col-header {\n      width: 20%;\n    }\n\n    .col-content {\n      width: 80%;\n    }\n  }\n}\n","@mixin grid-item($columns: '') {\n  flex-grow: 1;\n  margin-bottom: 1em;\n  width: 100%;\n\n  @include large {\n    margin: 0 3% 3% 0;\n    width: auto;\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  @if $columns == 2 {\n    @include large {\n      width: 48.2%;\n\n      &:nth-child(2n) {\n        margin-right: 0;\n      }\n    }\n  }\n\n  @if $columns == 3 {\n    @include large {\n      width: 31%;\n\n      &:nth-child(3n) {\n        margin-right: 0;\n      }\n    }\n  }\n}\n\n.grid__item {\n  @include grid-item;\n\n  // With Columns\n  .grid--columns-2 & {\n    @include grid-item(2);\n  }\n\n  .grid--columns-3 & {\n    @include grid-item(3);\n  }\n\n  // Pattern Lab Specific\n  .grid--pl & {\n    background-color: rgba(0, 0, 0, 0.2);\n    min-height: 100px;\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","// Grid Item With Divider\n@mixin grid-divider($columns: '') {\n  flex-grow: 0;\n\n  @include large {\n    margin-right: 3.5%;\n    position: relative;\n\n    &::after {\n      background-color: $gray-lighter;\n      content: \"\";\n      display: block;\n      height: 100%;\n      position: absolute;\n      top: 0;\n      width: 1px;\n    }\n  }\n\n  // Columns\n  @if $columns == 2 {\n    &::after {\n      right: -3.5%;\n    }\n\n    &:nth-child(2n) {\n      margin-right: 0;\n\n      &::after {\n        display: none;\n      }\n    }\n  }\n\n  @if $columns == 3 {\n    &::after {\n      right: -5.5%;\n    }\n\n    &:nth-child(3n) {\n      margin-right: 0;\n\n      &::after {\n        display: none;\n      }\n    }\n  }\n\n  &:last-child {\n    @include large {\n      margin-right: 0;\n    }\n\n    &::after {\n      display: none;\n    }\n  }\n}\n\n.grid__item {\n  .grid--divider & {\n    @include grid-divider;\n  }\n\n  .grid--divider.grid--columns-2 & {\n    @include grid-divider(2);\n  }\n\n  .grid--divider.grid--columns-3 & {\n    @include grid-divider(3);\n  }\n}\n","@mixin grid {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.grid {\n  @include grid;\n}\n","/**\n * @file\n * Styles for all non-homepage pages.\n */\n\n/* Layout */\n\n#main-wrapper {\n  // .layout-zone sets clearfix and squishy edges.\n  z-index: 1;\n}\n\n#main-content.main-sidebar-side {\n  // Set up flex defaults so the sidebar position can depend on viewport size.\n  @extend .layout-container;\n\n  #main-wrapper {\n    @include responsive-basis(100%, 62%, 62%, stretch);\n    @include squishy-padding(bottom);\n\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.4);\n\n    @include breakpoint($medium-width) {\n      // Override default squishy-padding from .layout-zone:\n      @include squishy-padding(left, stretch);\n      @include squishy-gutter(right);\n\n      box-shadow: 2px 0 2px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  #sidebar-wrapper {\n    @include responsive-basis(100%, 38%, 38%, stretch);\n\n    @include breakpoint($medium-width) {\n      // Establish this as a layout-zone-right.\n      @include squishy-padding(right, stretch);\n      @include squishy-gutter(left);\n\n      #sidebar-container {\n        flex-direction: column;\n\n        & > * {\n          width: 100%;\n        }\n      }\n    }\n  }\n}\n\n#main-content.main-sidebar-foot {\n  #main-wrapper {\n    // TODO: doesn't show up?\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.4);\n  }\n}\n\n/* Elements */\n\n#block-breadcrumbs {\n  margin-top: $space;\n  font-size: 1rem;\n}\n\n// Don't pad, even if there's a list of status messages of a single type.\n#messagebar ul {\n  padding-left: 0;\n}\n"],"names":[],"sourceRoot":""}